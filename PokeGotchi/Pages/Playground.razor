@using System.Text.Json
@using PokeGotchi.Models
@using PokeGotchi.Models.Enums
@inject AppState GameState
@inject IJSRuntime JS

<div id="playground-screen-container" class="stamp animate__animated animate__backInDown">
    @if (PartnerPokemon != null)
    {
        <div id="playground-partner-info">
            <div id="playground-current-state-container">
                <img id="playground-current-state-sprite" src="@PartnerPokemon.AnimationState" />
                <p id="playground-partner-name">@PartnerPokemon.Name</p>
            </div>

            <div id="playground-partner-stats-container">
                @foreach (KeyValuePair<string, int> stat in PartnerPokemon.Stats)
                {
                    <p>@stat.Key: @stat.Value</p>
                }
                <p>Mood: @PartnerPokemon.CurrentMood</p>
            </div>
        </div>

        <div id="playground-container">
            @for (int row = 0; row < numOfRows; row++) // Adjust rows count as needed
            {
                @for (int col = 0; col < numOfColumns; col++) // Adjust columns count as needed
                {
                    <div class="grid-cell"></div>
                }
            }

            <img id="pokemon-image"
                 src="@PartnerPokemon.AnimationState"
                 style="position: relative; left: @(PartnerPokemon.XPos)px; top: @(PartnerPokemon.YPos)px; "
                 alt="@PartnerPokemon.Name" />
        </div>

        <div>
            <button @onclick="() => MovePartner(Direction.Up)">Up</button>
            <button @onclick="() => MovePartner(Direction.UpLeft)">Up Left</button>
            <button @onclick="() => MovePartner(Direction.UpRight)">Up Right</button>
            <button @onclick="() => MovePartner(Direction.Left)">Left</button>
            <button @onclick="() => MovePartner(Direction.Right)">Right</button>
            <button @onclick="() => MovePartner(Direction.Down)">Down</button>
            <button @onclick="() => MovePartner(Direction.DownLeft)">Down Left</button>
            <button @onclick="() => MovePartner(Direction.DownRight)">Down Right</button>
            <button @onclick="GoIdle">Idle</button>
        </div>

        <div>
            <button @onclick="ExportData">Export Data</button>
        </div>

    }
    else
    {
        <p>Loading partner data...</p>
    }
</div>

@code {
    private Partner PartnerPokemon;
    private int playgroundWidth;
    private int playgroundHeight;
    private int playgroundArea;
    private int numOfRows;
    private int numOfColumns;
    
    
    private DotNetObjectReference<Playground> dotNetHelper;

    protected override void OnInitialized()
    {
        // load partner pokemon from AppState (localStorage -> appState)
        PartnerPokemon = GameState.SaveData.PartnerPokemon;
        dotNetHelper = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // ensure the resize observer is attached after the component is rendered
            await JS.InvokeVoidAsync("observeElementSize", "playground-container", dotNetHelper);
        }
    }

    [JSInvokable]
    public void OnSizeChanged(int width, int height)
    {
        playgroundWidth = width;
        playgroundHeight = height;
        playgroundArea = width * height;

        numOfRows = playgroundWidth / 50;
        numOfColumns = playgroundHeight / 50;


        
        

        Console.WriteLine("width: " + playgroundWidth);
        Console.WriteLine("height: " + playgroundHeight);

        // force re-rendering after size changes
        StateHasChanged();
    }

    public void Dispose()
    {
        // cleanup the observer when the component is destroyed
        if (dotNetHelper != null)
        {
            JS.InvokeVoidAsync("unobserveElementSize", "playground-container");
            dotNetHelper.Dispose();
        }
    }

    private void MovePartner(Direction direction)
    {
        PartnerPokemon.Walk(direction);
        StateHasChanged(); // re-render component
        GameState.SaveGameDataAsync();
    }

    private void GoIdle()
    {
        PartnerPokemon.AnimationState = "images/animations/idle.gif";
        StateHasChanged();
        GameState.SaveGameDataAsync();
    }

    private async Task ExportData()
    {
        // serialize the PartnerPokemon object to json
        var jsonSaveData = System.Text.Json.JsonSerializer.Serialize(GameState.SaveData);

        // js function for triggering the downloadFile function (defined in index.html)
        await JS.InvokeVoidAsync("downloadFile", "pokeGotchiSaveData.json", jsonSaveData);
    }

}
