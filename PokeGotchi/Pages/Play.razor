@using PokeGotchi.Components
@using PokeGotchi.Utils
@inject AppState GameState
@inject IJSRuntime JSRuntime

<div class="play-container @containerAnimatedClass">
    <div class="play-title-container">
        <img id="play-riolu-gif" src="images/walk-trip.gif" />
        <img id="play-title" src="images/pokegotchi-title.gif" width="30%">
    </div>

    <div id="play-play-button" class="animate__animated @playButtonClass" @onclick="HandlePlayClick">Play</div>

    <footer class="play-footer">
        <div id="play-import" class="animate__animated @importClass" @onclick="OpenModal">Import Save</div>
        <div id="play-github-link">
            <a target="_blank" href="https://github.com/khadir786">github.com/khadir786</a>
        </div>
    </footer>
</div>

<!-- Modal component -->
@if (isModalOpen)
{
    <Modal
        Title="Import Save File"
        Content="Import a JSON save file here:"
        ShowFileInput="true"
        ErrorMessage="@errorMessage"
        SuccessMessage="@successMessage"
        ModalOverlayClass="@modalOverlayClass"
        ModalContentClass="@modalContentClass"
        OnClose="CloseModal"
        OnFileSelected="Import" />
}

@code {
    private string playButtonClass = "";
    private string containerAnimatedClass = "animate__animated animate__fadeIn";
    
    private string importClass = "";
    
    private bool isModalOpen = false;
    private string modalOverlayClass = "animate__fadeIn";
    private string modalContentClass = "animate__fadeInDownBig";
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // load saved data from local storage
        await GameState.LoadSaveDataAsync();
    }

    private async Task HandlePlayClick()
    {
        playButtonClass = "animate__wobble";
        containerAnimatedClass = "animate__animated animate__fadeOut animate__delay-1s";
        await Task.Delay(3000);
        GameState.GameScreen = "PLAYGROUND";
    }

    private void OpenModal()
    {
        isModalOpen = true;
        modalOverlayClass = "animate__fadeIn";
        modalContentClass = "animate__fadeInDownBig";
        importClass = "animate__pulse";
    }

    private async Task CloseModal()
    {
        modalOverlayClass = "animate__fadeOut";
        modalContentClass = "animate__fadeOutUpBig";
        importClass = "";
        errorMessage = "";
        successMessage = "";

        // wait for the animation to complete
        await Task.Delay(500);
        isModalOpen = false;
    }

    // json file gets read and localstorage is overwritten
    private async Task Import(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            try
            {
                using (var stream = file.OpenReadStream())
                using (var reader = new StreamReader(stream))
                {
                    string fileContent = await reader.ReadToEndAsync();

                    // check if uploaded file is a json file
                    if (!JsonValidator.IsValidJson(fileContent))
                    {
                        errorMessage = "The uploaded file is not a valid JSON file";
                        return;
                    }

                    // attempt to deserialize and validate the structure
                    try
                    {
                        var saveData = System.Text.Json.JsonSerializer.Deserialize<SaveData>(fileContent);

                        if (saveData == null || !JsonValidator.ValidateSaveData(saveData))
                        {
                            errorMessage = "The uploaded JSON file is missing required properties";
                            return;
                        }

                        // passed validation checks
                        successMessage = "Save data imported successfully";
                        GameState.SaveData = saveData;
                        await GameState.SaveGameDataAsync();  // overwrite localStorage

                        StateHasChanged();
                    }
                    catch (Exception)
                    {
                        errorMessage = "The uploaded JSON file has an invalid structure";
                    }
                }
            }
            catch (IOException ex)
            {
                errorMessage = $"File size exceeds the allowed limit - {ex.Message}";
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred while uploading the file: {ex.Message}";
            }
        }
    }
}
